{"nbformat":4,"nbformat_minor":5,"metadata":{"colab":{"name":"ModelliNotebook.ipynb adlı not defterinin kopyası","provenance":[{"file_id":"11Tk7BBWNbWT1WYcCZgR9_lUyntf4o0EK","timestamp":1636625146700}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.7"}},"cells":[{"cell_type":"code","metadata":{"id":"MX9c2JsXDNLe","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636622771016,"user_tz":-180,"elapsed":12543,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}},"outputId":"b812dd9d-2503-4c6b-e29b-7c69f4e98dc4"},"source":["!pip install catboost"],"id":"MX9c2JsXDNLe","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting catboost\n","  Downloading catboost-1.0.3-cp37-none-manylinux1_x86_64.whl (76.3 MB)\n","\u001b[K     |████████████████████████████████| 76.3 MB 27 kB/s \n","\u001b[?25hRequirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from catboost) (3.2.2)\n","Requirement already satisfied: graphviz in /usr/local/lib/python3.7/dist-packages (from catboost) (0.10.1)\n","Requirement already satisfied: plotly in /usr/local/lib/python3.7/dist-packages (from catboost) (4.4.1)\n","Requirement already satisfied: pandas>=0.24.0 in /usr/local/lib/python3.7/dist-packages (from catboost) (1.1.5)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from catboost) (1.15.0)\n","Requirement already satisfied: numpy>=1.16.0 in /usr/local/lib/python3.7/dist-packages (from catboost) (1.19.5)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from catboost) (1.4.1)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->catboost) (2.8.2)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->catboost) (2018.9)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib->catboost) (0.11.0)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->catboost) (2.4.7)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->catboost) (1.3.2)\n","Requirement already satisfied: retrying>=1.3.3 in /usr/local/lib/python3.7/dist-packages (from plotly->catboost) (1.3.3)\n","Installing collected packages: catboost\n","Successfully installed catboost-1.0.3\n"]}]},{"cell_type":"code","metadata":{"id":"24P15W3TVvFu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636622771556,"user_tz":-180,"elapsed":547,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}},"outputId":"e5e177e8-b314-43ff-efe7-d43c64ef4ad1"},"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import datetime as dt\n","import plotly.express as px\n","import plotly.graph_objects as go\n","pd.set_option('display.max_rows', 500)\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import classification_report\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.metrics import accuracy_score\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.svm import SVC\n","from sklearn.metrics import confusion_matrix\n","\n","from imblearn.over_sampling import SMOTE\n","from imblearn.under_sampling import RandomUnderSampler\n","from imblearn.pipeline import Pipeline\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.preprocessing import LabelEncoder\n","import random\n","from catboost import CatBoostClassifier"],"id":"24P15W3TVvFu","execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/externals/six.py:31: FutureWarning:\n","\n","The module is deprecated in version 0.21 and will be removed in version 0.23 since we've dropped support for Python 2.7. Please rely on the official version of six (https://pypi.org/project/six/).\n","\n","/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:144: FutureWarning:\n","\n","The sklearn.neighbors.base module is  deprecated in version 0.22 and will be removed in version 0.24. The corresponding classes / functions should instead be imported from sklearn.neighbors. Anything that cannot be imported from sklearn.neighbors is now part of the private API.\n","\n"]}]},{"cell_type":"code","metadata":{"id":"mf2vDGFMVvFy","colab":{"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":""}},"base_uri":"https://localhost:8080/","height":144},"executionInfo":{"status":"ok","timestamp":1636622876373,"user_tz":-180,"elapsed":104834,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}},"outputId":"3f924c4e-1349-4de4-c267-f834166e7d04"},"source":["from google.colab import files\n","\n","uploaded = files.upload()\n","\n","for fn in uploaded.keys():\n","  print('User uploaded file \"{name}\" with length {length} bytes'.format(\n","      name=fn, length=len(uploaded[fn])))"],"id":"mf2vDGFMVvFy","execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","     <input type=\"file\" id=\"files-478ae40f-c75a-4de4-8296-36c309f4f360\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-478ae40f-c75a-4de4-8296-36c309f4f360\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving train_5.xlsx to train_5.xlsx\n","User uploaded file \"train_5.xlsx\" with length 7524571 bytes\n"]}]},{"cell_type":"code","metadata":{"id":"ewnuMbg2CiAj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636625128386,"user_tz":-180,"elapsed":6798,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}},"outputId":"103c6341-27d6-480f-fa7e-ca4781fe236a"},"source":["df = pd.read_excel(\"train_5.xlsx\")\n","main_df = df\n","df.info()"],"id":"ewnuMbg2CiAj","execution_count":180,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 15000 entries, 0 to 14999\n","Data columns (total 50 columns):\n"," #   Column                  Non-Null Count  Dtype         \n","---  ------                  --------------  -----         \n"," 0   TUKETIM_M1              15000 non-null  float64       \n"," 1   TUKETIM_M2              15000 non-null  float64       \n"," 2   TUKETIM_M3              15000 non-null  float64       \n"," 3   TUKETIM_M4              15000 non-null  float64       \n"," 4   TUKETIM_M5              15000 non-null  float64       \n"," 5   TUKETIM_M6              15000 non-null  float64       \n"," 6   TUKETIM_M7              15000 non-null  float64       \n"," 7   TUKETIM_M8              15000 non-null  float64       \n"," 8   TUKETIM_M9              15000 non-null  float64       \n"," 9   TUKETIM_M10             15000 non-null  float64       \n"," 10  TUKETIM_M11             15000 non-null  float64       \n"," 11  TUKETIM_M12             15000 non-null  float64       \n"," 12  TUKETIM_M13             14956 non-null  float64       \n"," 13  TUKETIM_M14             14899 non-null  float64       \n"," 14  TUKETIM_M15             14845 non-null  float64       \n"," 15  TUKETIM_M16             14800 non-null  float64       \n"," 16  TUKETIM_M17             14746 non-null  float64       \n"," 17  TUKETIM_M18             14707 non-null  float64       \n"," 18  TUKETIM_M19             14664 non-null  float64       \n"," 19  TUKETIM_M20             14608 non-null  float64       \n"," 20  TUKETIM_M21             14568 non-null  float64       \n"," 21  TUKETIM_M22             14515 non-null  float64       \n"," 22  TUKETIM_M23             14456 non-null  float64       \n"," 23  TUKETIM_M24             14360 non-null  float64       \n"," 24  DEMAND_M1               14929 non-null  float64       \n"," 25  DEMAND_M2               12612 non-null  float64       \n"," 26  DEMAND_M3               14217 non-null  float64       \n"," 27  DEMAND_M4               12631 non-null  float64       \n"," 28  DEMAND_M5               14055 non-null  float64       \n"," 29  DEMAND_M6               12418 non-null  float64       \n"," 30  DEMAND_M7               13978 non-null  float64       \n"," 31  DEMAND_M8               12243 non-null  float64       \n"," 32  DEMAND_M9               13766 non-null  float64       \n"," 33  DEMAND_M10              12242 non-null  float64       \n"," 34  DEMAND_M11              13692 non-null  float64       \n"," 35  DEMAND_M12              11825 non-null  float64       \n"," 36  SOB_RISK_SKORU          15000 non-null  float64       \n"," 37  SOKAK_RISK_SKORU        15000 non-null  float64       \n"," 38  MAHALLE_RISK_SKORU      15000 non-null  float64       \n"," 39  TESISAT_TIPI            15000 non-null  object        \n"," 40  SAYAC_BASLANGIC_TARIHI  14950 non-null  datetime64[ns]\n"," 41  SAYAC_BITIS_TARIHI      14950 non-null  object        \n"," 42  SAYAC_MARKA             14950 non-null  object        \n"," 43  SAYAC_MODEL             14950 non-null  object        \n"," 44  SAYAC_MALZEME_ID        14950 non-null  float64       \n"," 45  SAYAC_OLCUM_TURU        14950 non-null  object        \n"," 46  SAYAC_FAZ_N             14950 non-null  object        \n"," 47  SAYAC_TAKILMA_TARIHI    14950 non-null  datetime64[ns]\n"," 48  SAYAC_YAPIM_YILI        14950 non-null  float64       \n"," 49  NK_FLAG                 15000 non-null  int64         \n","dtypes: datetime64[ns](2), float64(41), int64(1), object(6)\n","memory usage: 5.7+ MB\n"]}]},{"cell_type":"code","metadata":{"id":"2ZzjkrCgQWze","executionInfo":{"status":"ok","timestamp":1636625128387,"user_tz":-180,"elapsed":39,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["#demand 1 boş ise demand 2'deki değere eşitle\n","df.loc[df.iloc[:, 24].isnull(), [df.iloc[:, 24].name]] = df[df.iloc[:, 24].isnull()].iloc[:, 25].tolist()\n","#demeand 12 boş ise demand 11'deki değere eşitle\n","df.loc[df.iloc[:, 35].isnull(), [df.iloc[:, 35].name]] = df[df.iloc[:, 35].isnull()].iloc[:, 34].tolist()\n","#demand 2 ile 11 arasındaki boşlukları önceki ve sonraki demand ortalamasına eşitle\n","for i in range(25,35):\n","  sutun = df.iloc[:, i]\n","  onceki_sutun = df[sutun.isnull()].iloc[:, i-1].tolist()\n","  sonraki_sutun = df[sutun.isnull()].iloc[:, i+1].tolist()\n","  df.loc[sutun.isnull(), [sutun.name]] = np.array(onceki_sutun) + np.array(sonraki_sutun) / 2\n","#her bir satırın kalan bos demandlarını o satırın ortalama demandine eşitle \n","for i in range(24,36):\n","  sutun = df.iloc[:, i]\n","  df.loc[sutun.isnull(), [sutun.name]] = df.iloc[:, 24:35].mean(axis=1)\n","#hiçbir tüketim değeri yok ise 999_999'a eşitle\n","for i in range(24,36):\n","  sutun = df.iloc[:, i]\n","  df[sutun.name].fillna(999999, inplace=True)"],"id":"2ZzjkrCgQWze","execution_count":181,"outputs":[]},{"cell_type":"code","metadata":{"id":"kEkCcEyOO6N7","executionInfo":{"status":"ok","timestamp":1636625128389,"user_tz":-180,"elapsed":38,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["df.TESISAT_TIPI.replace('Mesken', '0', inplace=True)\n","df.TESISAT_TIPI.replace('Ticarethane-Sanayi', '1', inplace = True)"],"id":"kEkCcEyOO6N7","execution_count":182,"outputs":[]},{"cell_type":"code","metadata":{"id":"paTLkzWLRZH4","executionInfo":{"status":"ok","timestamp":1636625128390,"user_tz":-180,"elapsed":38,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["imb = df['SAYAC_YAPIM_YILI'].unique()\n","guncel = 2021\n","for i in imb:\n","    df['SAYAC_YAS'] = guncel - df['SAYAC_YAPIM_YILI'] \n","df['SAYAC_YAS'].fillna(99,inplace=True)"],"id":"paTLkzWLRZH4","execution_count":183,"outputs":[]},{"cell_type":"code","metadata":{"id":"C5YDSaX6R3sn","executionInfo":{"status":"ok","timestamp":1636625128392,"user_tz":-180,"elapsed":38,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["df[\"SAYAC_YAS\"].replace({\n","    1 : \"0-3 YAŞ\",\n","    2 : \"0-3 YAŞ\",\n","    3 : \"0-3 YAŞ\",\n","    4 : '4 YAŞ', \n","    5 : '4+ YAŞ', \n","    6 : '4+ YAŞ', \n","    7 : '4+ YAŞ', \n","    8 : '4+ YAŞ', \n","    9 : '4+ YAŞ',\n","    10 : '4+ YAŞ', \n","    11 : '4+ YAŞ', \n","    12 : '4+ YAŞ', \n","    13 : '4+ YAŞ', \n","    14 : '4+ YAŞ', \n","    99 : 'EKSIK'}, inplace=True)"],"id":"C5YDSaX6R3sn","execution_count":184,"outputs":[]},{"cell_type":"code","metadata":{"id":"UDnHFyYUXtbJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636625128394,"user_tz":-180,"elapsed":39,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}},"outputId":"250ac0d3-8193-4a81-dbe7-22cda8b3a360"},"source":["SAYAC_MODEL_DICT = {\n","    'LUN10-B' : \"%20\",\n","    'AEL.TF.16-2' : \"%20\",\n","    'LUN23 TF' : \"%20\",\n","    'EC058MCT' : '%6-8', \n","    'LSM-35': '%6-8', \n","    'VEM-T5100DB0E': '%6-8', \n","    'T510.2251': '%6-8', \n","    'M500.2211': '%6-8',\n","    'LUN10' : '%3-5',\n","    'EC058MBW' : '%3-5',\n","    'VEM-M580DB0E' : '%3-5',\n","    'VEM-M580DB0' :  '%3-5',\n","    'LUN21' :  '%3-5',\n","    'EC25TPA3CHB' :  '%3-5',\n","    'VEM-T5100DB0' :  '%3-5',\n","    'LUN1' : '%1-3', \n","    'EC018MBW': '%1-3', \n","    'AEL.MF.07': '%1-3', \n","    'EC15ATBW': '%1-3', \n","    'M500.2251': '%1-3', \n","    'M310.2218': '%1-3', \n","    'M550.2251': '%1-3', \n","    'EC11ATBW': '%1-3', \n","    'AEL.TF.16': '%1-3',\n","    'EKSIK': 'EKSIK'\n","}\n","df.loc[df.SAYAC_MODEL.isnull(),[\"SAYAC_MODEL\"]] = 'EKSIK'\n","df[\"SAYAC_MODEL_group\"] = df.SAYAC_MODEL.map(SAYAC_MODEL_DICT)\n","df.loc[df.SAYAC_MODEL_group.isnull(),[\"SAYAC_MODEL_group\"]] = \"DIGER\"\n","df[\"SAYAC_MODEL_group\"].value_counts()"],"id":"UDnHFyYUXtbJ","execution_count":185,"outputs":[{"output_type":"execute_result","data":{"text/plain":["%3-5     6922\n","%1-3     3814\n","%20      2311\n","%6-8     1362\n","DIGER     541\n","EKSIK      50\n","Name: SAYAC_MODEL_group, dtype: int64"]},"metadata":{},"execution_count":185}]},{"cell_type":"code","metadata":{"id":"Q20eYEHyefXX","executionInfo":{"status":"ok","timestamp":1636625128395,"user_tz":-180,"elapsed":31,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["df[\"TUKETIM_std\"] = df.iloc[:, 0:24].std(axis=1)\n","df[\"DEMAND_std\"] = df.iloc[:, 24:36].std(axis=1)"],"id":"Q20eYEHyefXX","execution_count":186,"outputs":[]},{"cell_type":"code","metadata":{"id":"wRSa_QDOErEw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636625128397,"user_tz":-180,"elapsed":32,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}},"outputId":"1114501d-86ba-4353-e673-c55eae2c4063"},"source":["model_df= df[[\"TUKETIM_M1\", \"TUKETIM_M2\", \"TUKETIM_M3\",\n","\"TUKETIM_M4\", \"TUKETIM_M5\", \"TUKETIM_M6\",\n","\"TUKETIM_M7\", \"TUKETIM_M8\", \"TUKETIM_M9\",\n","\"TUKETIM_M11\", \"TUKETIM_M12\", \"TUKETIM_M24\",\n","\"DEMAND_M1\",\n","\"DEMAND_M2\",\n","\"DEMAND_M3\",\n","\"DEMAND_M4\",\n","\"DEMAND_M5\",\n","\"DEMAND_M6\",\"DEMAND_M7\",\"DEMAND_M8\",\"DEMAND_M9\",\n","\"DEMAND_M10\",\n","\"DEMAND_M11\",\"DEMAND_M12\",\"TESISAT_TIPI\",\n","\"TUKETIM_std\",\n","\"DEMAND_std\",\n","\"SAYAC_YAS\",\n","\"SAYAC_MODEL_group\",\n","\"SOB_RISK_SKORU\",\n","\"SOKAK_RISK_SKORU\",\n","\"MAHALLE_RISK_SKORU\",\n","\"NK_FLAG\"]]\n","model_df.fillna(0, inplace=True)"],"id":"wRSa_QDOErEw","execution_count":187,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4327: SettingWithCopyWarning:\n","\n","\n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n"]}]},{"cell_type":"code","metadata":{"id":"t7mllKqVaSvd","executionInfo":{"status":"ok","timestamp":1636625128398,"user_tz":-180,"elapsed":24,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["cat_cols =[\"TESISAT_TIPI\", \"SAYAC_YAS\", \"SAYAC_MODEL_group\"]"],"id":"t7mllKqVaSvd","execution_count":188,"outputs":[]},{"cell_type":"code","metadata":{"id":"EQYGcjG8aLZY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636625128942,"user_tz":-180,"elapsed":566,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}},"outputId":"a49e9c33-33f1-4f42-9435-09cbe5a70019"},"source":["for col in cat_cols:\n","  model_df[col] = model_df[col].astype('object')\n","\n","model_df.info()"],"id":"EQYGcjG8aLZY","execution_count":189,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 15000 entries, 0 to 14999\n","Data columns (total 33 columns):\n"," #   Column              Non-Null Count  Dtype  \n","---  ------              --------------  -----  \n"," 0   TUKETIM_M1          15000 non-null  float64\n"," 1   TUKETIM_M2          15000 non-null  float64\n"," 2   TUKETIM_M3          15000 non-null  float64\n"," 3   TUKETIM_M4          15000 non-null  float64\n"," 4   TUKETIM_M5          15000 non-null  float64\n"," 5   TUKETIM_M6          15000 non-null  float64\n"," 6   TUKETIM_M7          15000 non-null  float64\n"," 7   TUKETIM_M8          15000 non-null  float64\n"," 8   TUKETIM_M9          15000 non-null  float64\n"," 9   TUKETIM_M11         15000 non-null  float64\n"," 10  TUKETIM_M12         15000 non-null  float64\n"," 11  TUKETIM_M24         15000 non-null  float64\n"," 12  DEMAND_M1           15000 non-null  float64\n"," 13  DEMAND_M2           15000 non-null  float64\n"," 14  DEMAND_M3           15000 non-null  float64\n"," 15  DEMAND_M4           15000 non-null  float64\n"," 16  DEMAND_M5           15000 non-null  float64\n"," 17  DEMAND_M6           15000 non-null  float64\n"," 18  DEMAND_M7           15000 non-null  float64\n"," 19  DEMAND_M8           15000 non-null  float64\n"," 20  DEMAND_M9           15000 non-null  float64\n"," 21  DEMAND_M10          15000 non-null  float64\n"," 22  DEMAND_M11          15000 non-null  float64\n"," 23  DEMAND_M12          15000 non-null  float64\n"," 24  TESISAT_TIPI        15000 non-null  object \n"," 25  TUKETIM_std         15000 non-null  float64\n"," 26  DEMAND_std          15000 non-null  float64\n"," 27  SAYAC_YAS           15000 non-null  object \n"," 28  SAYAC_MODEL_group   15000 non-null  object \n"," 29  SOB_RISK_SKORU      15000 non-null  float64\n"," 30  SOKAK_RISK_SKORU    15000 non-null  float64\n"," 31  MAHALLE_RISK_SKORU  15000 non-null  float64\n"," 32  NK_FLAG             15000 non-null  int64  \n","dtypes: float64(29), int64(1), object(3)\n","memory usage: 3.8+ MB\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning:\n","\n","\n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n"]}]},{"cell_type":"code","metadata":{"id":"jg0fAKjeShtf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636625128944,"user_tz":-180,"elapsed":32,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}},"outputId":"3d60983f-333b-47e9-a788-8433f6fdeabe"},"source":["model_df.SAYAC_YAS.value_counts()"],"id":"jg0fAKjeShtf","execution_count":190,"outputs":[{"output_type":"execute_result","data":{"text/plain":["4+ YAŞ     11039\n","4 YAŞ       2300\n","0-3 YAŞ     1611\n","EKSIK         50\n","Name: SAYAC_YAS, dtype: int64"]},"metadata":{},"execution_count":190}]},{"cell_type":"code","metadata":{"id":"zJ-cyft5acrC","executionInfo":{"status":"ok","timestamp":1636625128946,"user_tz":-180,"elapsed":26,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["\n","valData = model_df.head(3000)\n","train_testData =model_df.tail(12000)\n","X = train_testData.drop(\"NK_FLAG\", 1)\n","y = train_testData.NK_FLAG\n","\n","X_val = valData.drop(\"NK_FLAG\", 1)\n","y_val = valData.NK_FLAG\n","from sklearn.preprocessing import StandardScaler, OneHotEncoder\n","from sklearn.compose import make_column_transformer\n","\n","# OneHotEncoder'i fit edip column transformer üzerinden modele uyguladım\n","ohe = OneHotEncoder(handle_unknown='ignore', dtype=\"int64\")\n","ct = make_column_transformer((ohe, cat_cols), remainder=\"passthrough\")\n","X = pd.DataFrame(ct.fit_transform(X))\n","X_val = pd.DataFrame(ct.transform(X_val))"],"id":"zJ-cyft5acrC","execution_count":191,"outputs":[]},{"cell_type":"code","metadata":{"id":"ohDbbEJnELs8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636625128947,"user_tz":-180,"elapsed":26,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}},"outputId":"b04fd5ac-f7ef-4b38-c60e-37ce3affb969"},"source":["oversample = SMOTE(sampling_strategy=1, random_state=9)\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3,  random_state = 42)\n","X_over, y_over = oversample.fit_resample(X_train, y_train)\n","X_train, X_test, y_train, y_test = train_test_split(X_over, y_over, test_size = 0.3, random_state = 1)"],"id":"ohDbbEJnELs8","execution_count":192,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning:\n","\n","Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n","\n"]}]},{"cell_type":"code","metadata":{"id":"HTomtCo9MX0k","colab":{"base_uri":"https://localhost:8080/","height":103},"executionInfo":{"status":"ok","timestamp":1636625128949,"user_tz":-180,"elapsed":21,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}},"outputId":"1474eedd-a108-4487-bdc1-dc3032523887"},"source":["\n","\"\"\"\n","from sklearn.preprocessing import StandardScaler, Normalizer\n","\n","sc = StandardScaler()\n","normalize = Normalizer()\n","X = normalize.fit_transform(X)\n","X_val = normalize.transform(X_val)\n","\"\"\""],"id":"HTomtCo9MX0k","execution_count":193,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'\\nfrom sklearn.preprocessing import StandardScaler, Normalizer\\n\\nsc = StandardScaler()\\nnormalize = Normalizer()\\nX = normalize.fit_transform(X)\\nX_val = normalize.transform(X_val)\\n'"]},"metadata":{},"execution_count":193}]},{"cell_type":"code","metadata":{"id":"oYejUdk_DfdT","colab":{"base_uri":"https://localhost:8080/","height":449},"executionInfo":{"status":"ok","timestamp":1636625131274,"user_tz":-180,"elapsed":2342,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}},"outputId":"1e086616-2829-4849-dcd2-5c316e6d9709"},"source":["cbc=CatBoostClassifier( n_estimators = 200, max_depth = 5, verbose = 0)\n","cbc.fit(X_train, y_train)\n","preds = cbc.predict(X_test)\n","score = cbc.score(X_test, y_test)\n","print(score*100)\n","print(classification_report(y_test, preds))\n","cm = confusion_matrix(y_test, preds)\n","sns.heatmap(cm, annot=True)"],"id":"oYejUdk_DfdT","execution_count":194,"outputs":[{"output_type":"stream","name":"stdout","text":["97.99231097821443\n","              precision    recall  f1-score   support\n","\n","           0       0.98      0.98      0.98      2342\n","           1       0.98      0.98      0.98      2340\n","\n","    accuracy                           0.98      4682\n","   macro avg       0.98      0.98      0.98      4682\n","weighted avg       0.98      0.98      0.98      4682\n","\n"]},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fe578c198d0>"]},"metadata":{},"execution_count":194},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"gi93RIgNFQlr","colab":{"base_uri":"https://localhost:8080/","height":466},"executionInfo":{"status":"ok","timestamp":1636625131965,"user_tz":-180,"elapsed":711,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}},"outputId":"7e4f44de-2770-4815-c5a6-0c221bf05aa9"},"source":["preds = cbc.predict(X_val)\n","score = cbc.score(X_val, y_val)\n","print(score*100)\n","print()\n","print(classification_report(y_val, preds))\n","\n","cm = confusion_matrix(y_val, preds)\n","sns\n","sns.heatmap(cm, annot=True)"],"id":"gi93RIgNFQlr","execution_count":195,"outputs":[{"output_type":"stream","name":"stdout","text":["95.96666666666667\n","\n","              precision    recall  f1-score   support\n","\n","           0       0.98      0.98      0.98      2805\n","           1       0.69      0.70      0.69       195\n","\n","    accuracy                           0.96      3000\n","   macro avg       0.83      0.84      0.84      3000\n","weighted avg       0.96      0.96      0.96      3000\n","\n"]},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fe586039fd0>"]},"metadata":{},"execution_count":195},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"arCmhAtXND5C","colab":{"base_uri":"https://localhost:8080/","height":449},"executionInfo":{"status":"ok","timestamp":1636625134023,"user_tz":-180,"elapsed":2071,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}},"outputId":"6bc5bcd5-b941-4940-d93e-5dd01c9c4dc5"},"source":["from sklearn.neighbors import KNeighborsClassifier\n","kc = KNeighborsClassifier()\n","kc.fit(X_train, y_train)\n","preds = kc.predict(X_test)\n","score = kc.score(X_test, y_test)\n","print(score*100)\n","print(classification_report(y_test, preds))\n","cm = confusion_matrix(y_test, preds)\n","sns.heatmap(cm, annot=True)"],"id":"arCmhAtXND5C","execution_count":196,"outputs":[{"output_type":"stream","name":"stdout","text":["92.69542930371635\n","              precision    recall  f1-score   support\n","\n","           0       0.99      0.86      0.92      2342\n","           1       0.88      0.99      0.93      2340\n","\n","    accuracy                           0.93      4682\n","   macro avg       0.93      0.93      0.93      4682\n","weighted avg       0.93      0.93      0.93      4682\n","\n"]},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fe5791e2690>"]},"metadata":{},"execution_count":196},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"gZP_xRRGN7Qk","colab":{"base_uri":"https://localhost:8080/","height":466},"executionInfo":{"status":"ok","timestamp":1636625136275,"user_tz":-180,"elapsed":2264,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}},"outputId":"53f1f50b-7bb3-403c-a415-b8c28105cfb2"},"source":["preds = kc.predict(X_val)\n","score = kc.score(X_val, y_val)\n","print(score*100)\n","print()\n","print(classification_report(y_val, preds))\n","\n","cm = confusion_matrix(y_val, preds)\n","sns\n","sns.heatmap(cm, annot=True)"],"id":"gZP_xRRGN7Qk","execution_count":197,"outputs":[{"output_type":"stream","name":"stdout","text":["84.5\n","\n","              precision    recall  f1-score   support\n","\n","           0       0.97      0.86      0.91      2805\n","           1       0.23      0.58      0.33       195\n","\n","    accuracy                           0.84      3000\n","   macro avg       0.60      0.72      0.62      3000\n","weighted avg       0.92      0.84      0.87      3000\n","\n"]},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fe578290a90>"]},"metadata":{},"execution_count":197},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"7e2ca145-88be-4904-a93a-16e584f9f9c6","colab":{"base_uri":"https://localhost:8080/","height":216},"executionInfo":{"status":"error","timestamp":1636625136954,"user_tz":-180,"elapsed":730,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}},"outputId":"1f20c78b-66f3-4f7c-ccc8-eb17116c6ef9"},"source":["df[\"ABONELIK_SURESI\"] = np.datetime64(\"2021-11-04\")\n","df[\"ABONELIK_SURESI\"] = r⁸ound((df[\"ABONELIK_SURESI\"] - df.SAYAC_BASLANGIC_TARIHI).dt.days / 30)\n","df.head()\n","df['ABONELIK_SURESI'] = df['ABONELIK_SURESI'].fillna(500)"],"id":"7e2ca145-88be-4904-a93a-16e584f9f9c6","execution_count":198,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-198-e027a2bd019e>\"\u001b[0;36m, line \u001b[0;32m2\u001b[0m\n\u001b[0;31m    df[\"ABONELIK_SURESI\"] = r⁸ound((df[\"ABONELIK_SURESI\"] - df.SAYAC_BASLANGIC_TARIHI).dt.days / 30)\u001b[0m\n\u001b[0m                                 ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid character in identifier\n"]}]},{"cell_type":"code","metadata":{"id":"25b12354-7515-4983-9412-cc47aa65385e","executionInfo":{"status":"aborted","timestamp":1636625136867,"user_tz":-180,"elapsed":637,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["df_id = pd.DataFrame(df.ABONELIK_SURESI.unique(), columns= [\"ABONELIK_SURESI\"])\n","df_id\n","\n","for i in df.ABONELIK_SURESI.unique():\n","  df_id.loc[df_id[\"ABONELIK_SURESI\"] == i, [\"KACAK_SAYISI\"]] = df.loc[df.ABONELIK_SURESI == i].NK_FLAG.sum()\n","  df_id.loc[df_id[\"ABONELIK_SURESI\"] == i, [\"TOPLAM_ABONE\"]] = len(df.loc[df.ABONELIK_SURESI == i].NK_FLAG)\n","  df_id.loc[df_id[\"ABONELIK_SURESI\"] == i, [\"KACAK_ORANI\"]] = df_id.KACAK_SAYISI / df_id.TOPLAM_ABONE *100\n","df_id = df_id.sort_values(\"KACAK_ORANI\", ascending=False)\n","df_id"],"id":"25b12354-7515-4983-9412-cc47aa65385e","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"f24dcd5e-9a50-47dd-9f16-07c5c7daec0b","executionInfo":{"status":"aborted","timestamp":1636625136869,"user_tz":-180,"elapsed":638,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["yüzde_0 = []\n","yüzde_1 = []\n","yüzde_4 = []\n","yüzde_8 = []\n","yüzde_12 = []\n","yüzde_15 = []\n","yüzde_16 = []\n","yüzde_19 = []\n","yüzde_20 = []\n","yüzde_21 = []\n","yüzde_23 = []\n","yüzde_24 = []\n","yüzde_25 = []\n","yüzde_26 = []\n","yüzde_27 = []\n","yüzde_28 = []\n","\n","for i in range(df_id.shape[0]) :\n","    if df_id.loc[i,'KACAK_ORANI'] < 0.01 :\n","        yüzde_0.append(df_id.loc[i,'ABONELIK_SURESI'])\n","        \n","    elif (df_id.loc[i,'KACAK_ORANI'] < 3.50) & (df_id.loc[i,'KACAK_ORANI'] > 1.50) :\n","        yüzde_1.append(df_id.loc[i,'ABONELIK_SURESI'])\n","    \n","    elif (df_id.loc[i,'KACAK_ORANI'] < 5.01) & (df_id.loc[i,'KACAK_ORANI'] > 3.50) :\n","        yüzde_4.append(df_id.loc[i,'ABONELIK_SURESI'])\n","        \n","    elif (df_id.loc[i,'KACAK_ORANI'] < 7.60) & (df_id.loc[i,'KACAK_ORANI'] > 5.25) :\n","        yüzde_8.append(df_id.loc[i,'ABONELIK_SURESI'])\n","        \n","    elif (df_id.loc[i,'KACAK_ORANI'] < 9.65) & (df_id.loc[i,'KACAK_ORANI'] > 8.25) :\n","        yüzde_12.append(df_id.loc[i,'ABONELIK_SURESI'])\n","        \n","    elif (df_id.loc[i,'KACAK_ORANI'] < 11.00) & (df_id.loc[i,'KACAK_ORANI'] > 10.70) :\n","        yüzde_15.append(df_id.loc[i,'ABONELIK_SURESI'])\n","        \n","    elif (df_id.loc[i,'KACAK_ORANI'] < 16.00) & (df_id.loc[i,'KACAK_ORANI'] > 12.75) :\n","        yüzde_16.append(df_id.loc[i,'ABONELIK_SURESI'])\n","        \n","    elif (df_id.loc[i,'KACAK_ORANI'] < 19.00) & (df_id.loc[i,'KACAK_ORANI'] > 18.00) :\n","        yüzde_19.append(df_id.loc[i,'ABONELIK_SURESI'])\n","        \n","    elif (df_id.loc[i,'KACAK_ORANI'] < 21.00) & (df_id.loc[i,'KACAK_ORANI'] > 19.50) :\n","        yüzde_20.append(df_id.loc[i,'ABONELIK_SURESI'])\n","        \n","    elif (df_id.loc[i,'KACAK_ORANI'] < 26.00) & (df_id.loc[i,'KACAK_ORANI'] > 22.50) :\n","        yüzde_21.append(df_id.loc[i,'ABONELIK_SURESI'])\n","        \n","    elif (df_id.loc[i,'KACAK_ORANI'] < 28.00) & (df_id.loc[i,'KACAK_ORANI'] > 26.10) :\n","        yüzde_23.append(df_id.loc[i,'ABONELIK_SURESI'])\n","        \n","    elif (df_id.loc[i,'KACAK_ORANI'] < 30.00) & (df_id.loc[i,'KACAK_ORANI'] > 28.50) :\n","        yüzde_24.append(df_id.loc[i,'ABONELIK_SURESI'])\n","        \n","    elif (df_id.loc[i,'KACAK_ORANI'] < 34.00) & (df_id.loc[i,'KACAK_ORANI'] > 32.00) :\n","        yüzde_25.append(df_id.loc[i,'ABONELIK_SURESI'])\n","        \n","    elif (df_id.loc[i,'KACAK_ORANI'] < 36.00) & (df_id.loc[i,'KACAK_ORANI'] > 35.00) :\n","        yüzde_26.append(df_id.loc[i,'ABONELIK_SURESI'])\n","        \n","    elif (df_id.loc[i,'KACAK_ORANI'] < 38.50) & (df_id.loc[i,'KACAK_ORANI'] > 37.50) :\n","        yüzde_27.append(df_id.loc[i,'ABONELIK_SURESI'])\n","        \n","    elif (df_id.loc[i,'KACAK_ORANI'] < 51.00) & (df_id.loc[i,'KACAK_ORANI'] > 47.50) :\n","        yüzde_28.append(df_id.loc[i,'ABONELIK_SURESI'])\n","        \n","\n","\n","for i in range(df.shape[0]) :\n","    if df.loc[i,'ABONELIK_SURESI'] in yüzde_0  :\n","        df.loc[i,'ABONELIK_SURESI'] = 'yüzde_0'\n","        \n","    elif df.loc[i,'ABONELIK_SURESI'] in yüzde_1  :\n","        df.loc[i,'ABONELIK_SURESI'] = 'yüzde_1'\n","    \n","    elif df.loc[i,'ABONELIK_SURESI'] in yüzde_4  :\n","        df.loc[i,'ABONELIK_SURESI'] = 'yüzde_4'\n","        \n","    elif df.loc[i,'ABONELIK_SURESI'] in yüzde_8  :\n","        df.loc[i,'ABONELIK_SURESI'] = 'yüzde_8'\n","        \n","    elif df.loc[i,'ABONELIK_SURESI'] in yüzde_12  :\n","        df.loc[i,'ABONELIK_SURESI'] = 'yüzde_12'\n","        \n","    elif df.loc[i,'ABONELIK_SURESI'] in yüzde_15  :\n","        df.loc[i,'ABONELIK_SURESI'] = 'yüzde_15'\n","        \n","    elif df.loc[i,'ABONELIK_SURESI'] in yüzde_16  :\n","        df.loc[i,'ABONELIK_SURESI'] = 'yüzde_16'\n","        \n","    elif df.loc[i,'ABONELIK_SURESI'] in yüzde_19  :\n","        df.loc[i,'ABONELIK_SURESI'] = 'yüzde_19'\n","        \n","    elif df.loc[i,'ABONELIK_SURESI'] in yüzde_20  :\n","        df.loc[i,'ABONELIK_SURESI'] = 'yüzde_20'\n","        \n","    elif df.loc[i,'ABONELIK_SURESI'] in yüzde_21  :\n","        df.loc[i,'ABONELIK_SURESI'] = 'yüzde_21'\n","        \n","    elif df.loc[i,'ABONELIK_SURESI'] in yüzde_23  :\n","        df.loc[i,'ABONELIK_SURESI'] = 'yüzde_23'\n","        \n","    elif df.loc[i,'ABONELIK_SURESI'] in yüzde_24  :\n","        df.loc[i,'ABONELIK_SURESI'] = 'yüzde_24'\n","        \n","    elif df.loc[i,'ABONELIK_SURESI'] in yüzde_25  :\n","        df.loc[i,'ABONELIK_SURESI'] = 'yüzde_25'\n","        \n","    elif df.loc[i,'ABONELIK_SURESI'] in yüzde_26  :\n","        df.loc[i,'ABONELIK_SURESI'] = 'yüzde_26'\n","        \n","    elif df.loc[i,'ABONELIK_SURESI'] in yüzde_27  :\n","        df.loc[i,'ABONELIK_SURESI'] = 'EKSIK'\n","        \n","    elif df.loc[i,'ABONELIK_SURESI'] in yüzde_28  :\n","        df.loc[i,'ABONELIK_SURESI'] = 'yüzde_28'\n","     "],"id":"f24dcd5e-9a50-47dd-9f16-07c5c7daec0b","execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dade96ac-1ff4-4f3d-9d01-f76008fc0885"},"source":["bin_labels = ['0-40', '41-50', '51-70', '70 üzeri','EKSIK']\n","bins = [0, 40, 50, 70, 200, 501]\n","df['ABONELIK_SURESI_group'] = pd.cut(df['ABONELIK_SURESI'], bins = bins, labels = bin_labels, include_lowest = True)\n","#df.loc[df.ABONELIK_SURESI==71.0,[\"ABONELIK_SURESI\",'ABONELIK_SURESI_group']]"],"id":"dade96ac-1ff4-4f3d-9d01-f76008fc0885"},{"cell_type":"code","metadata":{"id":"f7ab2171","executionInfo":{"status":"aborted","timestamp":1636625136870,"user_tz":-180,"elapsed":638,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["df_id = pd.DataFrame(df.SAYAC_MODEL.unique(), columns= [\"SAYAC_MODEL\"])\n","df_id\n","\n","for i in df.SAYAC_MODEL.unique():\n","  df_id.loc[df_id[\"SAYAC_MODEL\"] == i, [\"KACAK_SAYISI\"]] = df.loc[df.SAYAC_MODEL == i].NK_FLAG.sum()\n","  df_id.loc[df_id[\"SAYAC_MODEL\"] == i, [\"TOPLAM_ABONE\"]] = len(df.loc[df.SAYAC_MODEL == i].NK_FLAG)\n","  df_id.loc[df_id[\"SAYAC_MODEL\"] == i, [\"KACAK_ORANI\"]] = df_id.KACAK_SAYISI / df_id.TOPLAM_ABONE *100\n","df_id.sort_values(\"KACAK_SAYISI\", ascending=False)"],"id":"f7ab2171","execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"F0n4WK9-VvF4"},"source":["***"],"id":"F0n4WK9-VvF4"},{"cell_type":"code","metadata":{"id":"iqNfg656VvF5","executionInfo":{"status":"aborted","timestamp":1636625136872,"user_tz":-180,"elapsed":639,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["(df.SAYAC_BASLANGIC_TARIHI == df.SAYAC_TAKILMA_TARIHI).sum()\n"],"id":"iqNfg656VvF5","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yTle1TLSVvF5","executionInfo":{"status":"aborted","timestamp":1636625136876,"user_tz":-180,"elapsed":643,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["df[df.SAYAC_BASLANGIC_TARIHI == df.SAYAC_TAKILMA_TARIHI].NK_FLAG.value_counts()"],"id":"yTle1TLSVvF5","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EhSXG5BWVvF5","executionInfo":{"status":"aborted","timestamp":1636625136877,"user_tz":-180,"elapsed":643,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["df[df.SAYAC_BASLANGIC_TARIHI != df.SAYAC_TAKILMA_TARIHI].NK_FLAG.value_counts()"],"id":"EhSXG5BWVvF5","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"eDgEcyL9VvF6","executionInfo":{"status":"aborted","timestamp":1636625136879,"user_tz":-180,"elapsed":644,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["eksik_df = df[df.SAYAC_BASLANGIC_TARIHI != df.SAYAC_TAKILMA_TARIHI]\n"],"id":"eDgEcyL9VvF6","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"P72kML3WVvF6","executionInfo":{"status":"aborted","timestamp":1636625136880,"user_tz":-180,"elapsed":644,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["df.head()"],"id":"P72kML3WVvF6","execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bDbOiyo9VvF6"},"source":["***"],"id":"bDbOiyo9VvF6"},{"cell_type":"code","metadata":{"id":"qj6vpYO0VvF7","executionInfo":{"status":"aborted","timestamp":1636625136882,"user_tz":-180,"elapsed":646,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["df['SAYAC_MARKA'] = df['SAYAC_MARKA'].fillna(\"EKSIK\")\n","umbrealla = df['SAYAC_MARKA'].unique()\n","\n","for umb in umbrealla:\n","  if (umb != 'ELEKTROMED') & (umb != 'LUNA') & (umb != 'EKSIK'):\n","    df['SAYAC_MARKA'] = df['SAYAC_MARKA'].str.replace(umb, 'DIGER')\n","\n","df['SAYAC_MARKA'].unique()"],"id":"qj6vpYO0VvF7","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Iq6sv_9XVvGA","scrolled":true,"executionInfo":{"status":"aborted","timestamp":1636625136884,"user_tz":-180,"elapsed":647,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["sayac_df = pd.DataFrame(df.SAYAC_YAPIM_YILI.unique(), columns = [\"SAYAC_YAPIM_YILI\"])\n","for year in df.SAYAC_YAPIM_YILI.unique():\n","  sayac_df.loc[sayac_df.SAYAC_YAPIM_YILI == year, [\"kacak_oranı\"]] = df[df.SAYAC_YAPIM_YILI == year][\"NK_FLAG\"].sum() / len(df[df.SAYAC_YAPIM_YILI == year][\"NK_FLAG\"]) * 100\n","  sayac_df.loc[sayac_df.SAYAC_YAPIM_YILI == year, [\"sayac_sayisi\"]] = len(df[df.SAYAC_YAPIM_YILI == year][\"NK_FLAG\"])\n","sayac_df.sort_values(\"kacak_oranı\", ascending = False)"],"id":"Iq6sv_9XVvGA","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4d1e2869","executionInfo":{"status":"aborted","timestamp":1636625136885,"user_tz":-180,"elapsed":647,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["'''\n","df[\"TUKETIM_TALEP_ORANI_M1\"] = df.TUKETIM_M1 /  df.DEMAND_M1\n","\n","df[\"TUKETIM_TALEP_ORANI_M2\"] = df.TUKETIM_M2 /  df.DEMAND_M2\n","\n","df[\"TUKETIM_TALEP_ORANI_M3\"] = df.TUKETIM_M3 /  df.DEMAND_M3\n","\n","df[\"TUKETIM_TALEP_ORANI_M4\"] = df.TUKETIM_M4 /  df.DEMAND_M4\n","\n","df[\"TUKETIM_TALEP_ORANI_M5\"] = df.TUKETIM_M5 /  df.DEMAND_M5\n","\n","df[\"TUKETIM_TALEP_ORANI_M6\"] = df.TUKETIM_M6 /  df.DEMAND_M6\n","\n","df[\"TUKETIM_TALEP_ORANI_M7\"] = df.TUKETIM_M7 /  df.DEMAND_M7\n","\n","df[\"TUKETIM_TALEP_ORANI_M8\"] = df.TUKETIM_M8 /  df.DEMAND_M8\n","\n","df[\"TUKETIM_TALEP_ORANI_M9\"] = df.TUKETIM_M9 /  df.DEMAND_M9\n","\n","df[\"TUKETIM_TALEP_ORANI_M10\"] = df.TUKETIM_M10 /  df.DEMAND_M10\n","\n","df[\"TUKETIM_TALEP_ORANI_M11\"] = df.TUKETIM_M11 /  df.DEMAND_M11\n","\n","df[\"TUKETIM_TALEP_ORANI_M12\"] = df.TUKETIM_M12 /  df.DEMAND_M12\n","'''"],"id":"4d1e2869","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"f72adbd6","executionInfo":{"status":"aborted","timestamp":1636625136887,"user_tz":-180,"elapsed":649,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["#demand 1 boş ise demand 2'deki değere eşitle\n","df.loc[df.iloc[:, 24].isnull(), [df.iloc[:, 24].name]] = df[df.iloc[:, 24].isnull()].iloc[:, 25].tolist()\n","#demeand 12 boş ise demand 11'deki değere eşitle\n","df.loc[df.iloc[:, 35].isnull(), [df.iloc[:, 35].name]] = df[df.iloc[:, 35].isnull()].iloc[:, 34].tolist()\n","#demand 2 ile 11 arasındaki boşlukları önceki ve sonraki demand ortalamasına eşitle\n","for i in range(25,35):\n","  sutun = df.iloc[:, i]\n","  onceki_sutun = df[sutun.isnull()].iloc[:, i-1].tolist()\n","  sonraki_sutun = df[sutun.isnull()].iloc[:, i+1].tolist()\n","  df.loc[sutun.isnull(), [sutun.name]] = np.array(onceki_sutun) + np.array(sonraki_sutun) / 2\n","#her bir satırın kalan bos demandlarını o satırın ortalama demandine eşitle \n","for i in range(24,36):\n","  sutun = df.iloc[:, i]\n","  df.loc[sutun.isnull(), [sutun.name]] = df.iloc[:, 24:35].mean(axis=1)\n","#hiçbir tüketim değeri yok ise 999_999'a eşitle\n","for i in range(24,36):\n","  sutun = df.iloc[:, i]\n","  df[sutun.name].fillna(999999, inplace=True)"],"id":"f72adbd6","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"e35d90b2","executionInfo":{"status":"aborted","timestamp":1636625136888,"user_tz":-180,"elapsed":649,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["imb = df['SAYAC_YAPIM_YILI'].unique()\n","guncel = 2021\n","for i in imb:\n","    df['SAYAC_YAS'] = guncel - df['SAYAC_YAPIM_YILI'] \n","df['SAYAC_YAS'] = df['SAYAC_YAS'].astype('str')\n","df['SAYAC_YAS'].fillna(99,inplace=True)"],"id":"e35d90b2","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"9f9893e6-90f3-4020-ab8a-6af5a01dfcc5","executionInfo":{"status":"aborted","timestamp":1636625136890,"user_tz":-180,"elapsed":650,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["df[\"SAYAC_YAS\"].replace({\n","    1 : \"0-3 YAŞ\",\n","    2 : \"0-3 YAŞ\",\n","    3 : \"0-3 YAŞ\",\n","    4 : '4 YAŞ', \n","    5 : '4+ YAŞ', \n","    6 : '4+ YAŞ', \n","    7 : '4+ YAŞ', \n","    8 : '4+ YAŞ', \n","    9 : '4+ YAŞ',\n","    10 : '4+ YAŞ', \n","    11 : '4+ YAŞ', \n","    12 : '4+ YAŞ', \n","    13 : '4+ YAŞ', \n","    14 : '4+ YAŞ', \n","    99 : 'EKSIK'}, inplace=True)"],"id":"9f9893e6-90f3-4020-ab8a-6af5a01dfcc5","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"c3171de6","executionInfo":{"status":"aborted","timestamp":1636625136892,"user_tz":-180,"elapsed":652,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["df_id = pd.DataFrame(df.SAYAC_MODEL.unique(), columns= [\"SAYAC_MODEL\"])\n","df_id\n","\n","for i in df.SAYAC_MODEL.unique():\n","  df_id.loc[df_id[\"SAYAC_MODEL\"] == i, [\"KACAK_SAYISI\"]] = df.loc[df.SAYAC_MODEL == i].NK_FLAG.sum()\n","  df_id.loc[df_id[\"SAYAC_MODEL\"] == i, [\"TOPLAM_ABONE\"]] = len(df.loc[df.SAYAC_MODEL == i].NK_FLAG)\n","  df_id.loc[df_id[\"SAYAC_MODEL\"] == i, [\"KACAK_ORANI\"]] = df_id.KACAK_SAYISI / df_id.TOPLAM_ABONE *100\n","df_id.sort_values(\"KACAK_SAYISI\", ascending=False)"],"id":"c3171de6","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"18ead0a8","executionInfo":{"status":"aborted","timestamp":1636625136893,"user_tz":-180,"elapsed":652,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["SAYAC_MODEL_DICT = {\n","    'LUN10-B' : \"%20\",\n","    'AEL.TF.16-2' : \"%20\",\n","    'LUN23 TF' : \"%20\",\n","    'EC058MCT' : '%6-8', \n","    'LSM-35': '%6-8', \n","    'VEM-T5100DB0E': '%6-8', \n","    'T510.2251': '%6-8', \n","    'M500.2211': '%6-8',\n","    'LUN10' : '%3-5',\n","    'EC058MBW' : '%3-5',\n","    'VEM-M580DB0E' : '%3-5',\n","    'VEM-M580DB0' :  '%3-5',\n","    'LUN21' :  '%3-5',\n","    'EC25TPA3CHB' :  '%3-5',\n","    'VEM-T5100DB0' :  '%3-5',\n","    'LUN1' : '%1-3', \n","    'EC018MBW': '%1-3', \n","    'AEL.MF.07': '%1-3', \n","    'EC15ATBW': '%1-3', \n","    'M500.2251': '%1-3', \n","    'M310.2218': '%1-3', \n","    'M550.2251': '%1-3', \n","    'EC11ATBW': '%1-3', \n","    'AEL.TF.16': '%1-3',\n","    'EKSIK': 'EKSIK'\n","}\n","df.loc[df.SAYAC_MODEL.isnull(),[\"SAYAC_MODEL\"]] = 'EKSIK'\n","df[\"SAYAC_MODEL_group\"] = df.SAYAC_MODEL.map(SAYAC_MODEL_DICT)\n","df.loc[df.SAYAC_MODEL_group.isnull(),[\"SAYAC_MODEL_group\"]] = \"DIGER\"\n","df[\"SAYAC_MODEL_group\"].value_counts()"],"id":"18ead0a8","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dee729ca","executionInfo":{"status":"aborted","timestamp":1636625136895,"user_tz":-180,"elapsed":654,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["df_id = pd.DataFrame(df.SAYAC_MODEL_group.unique(), columns= [\"SAYAC_MODEL_group\"])\n","df_id\n","\n","for i in df.SAYAC_MODEL_group.unique():\n","  df_id.loc[df_id[\"SAYAC_MODEL_group\"] == i, [\"KACAK_SAYISI\"]] = df.loc[df.SAYAC_MODEL_group == i].NK_FLAG.sum()\n","  df_id.loc[df_id[\"SAYAC_MODEL_group\"] == i, [\"TOPLAM_ABONE\"]] = len(df.loc[df.SAYAC_MODEL_group == i].NK_FLAG)\n","  df_id.loc[df_id[\"SAYAC_MODEL_group\"] == i, [\"KACAK_ORANI\"]] = df_id.KACAK_SAYISI / df_id.TOPLAM_ABONE *100\n","df_id.sort_values(\"KACAK_SAYISI\", ascending=False)"],"id":"dee729ca","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cfd3be99","executionInfo":{"status":"aborted","timestamp":1636625136897,"user_tz":-180,"elapsed":655,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["df.loc[df.SAYAC_OLCUM_TURU.isnull(),[\"SAYAC_OLCUM_TURU\"]] = \"EKSIK\"\n","df.loc[df.SAYAC_FAZ_N.isnull(),[\"SAYAC_FAZ_N\"]] = \"EKSIK\""],"id":"cfd3be99","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"27e7f5d1","executionInfo":{"status":"aborted","timestamp":1636625136899,"user_tz":-180,"elapsed":656,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["df['SAYAC_MARKA'] = df['SAYAC_MARKA'].fillna(\"EKSIK\")\n","umbrealla = df['SAYAC_MARKA'].unique()\n","\n","for umb in umbrealla:\n","  if (umb != 'ELEKTROMED') & (umb != 'LUNA') & (umb != 'EKSIK'):\n","    df['SAYAC_MARKA'] = df['SAYAC_MARKA'].str.replace(umb, 'DIGER')\n","\n","df['SAYAC_MARKA'].unique()"],"id":"27e7f5d1","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"a661e8cb","executionInfo":{"status":"aborted","timestamp":1636625136901,"user_tz":-180,"elapsed":104,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["df.loc[df[\"TUKETIM_M24_group\"].isnull()]\n","df.drop(index=14541, inplace=True)"],"id":"a661e8cb","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"89f3b5e5","executionInfo":{"status":"aborted","timestamp":1636625136903,"user_tz":-180,"elapsed":106,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["df.info()"],"id":"89f3b5e5","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7fa68c5e","executionInfo":{"status":"aborted","timestamp":1636625136905,"user_tz":-180,"elapsed":107,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["cat_cols = df.select_dtypes(include=[\"category\"])\n","cat_cols"],"id":"7fa68c5e","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4afe7521","executionInfo":{"status":"aborted","timestamp":1636625136906,"user_tz":-180,"elapsed":108,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["# HataliTuketim, örnek verecek olursak 19 aylık abonenin 24 aya kadar dolu olan tüketim değerlerinin toplamını içerir. \n","liste = [19,20,21,22,23]\n","for abonelik_suresi in liste:\n","    df.loc[df[\"ABONELIK_SURESI\"] == abonelik_suresi, [\"HATALI_TUKETIM\"]]= df.iloc[:, abonelik_suresi:24].sum(axis=1)\n","    df[\"ABONE_SURESI_UYUSMAZLIGI\"] = df[\"HATALI_TUKETIM\"] > 0\n","df[ df[\"ABONE_SURESI_UYUSMAZLIGI\"]].NK_FLAG.sum() / len(df[\"ABONE_SURESI_UYUSMAZLIGI\"])\n","df[\"ABONE_SURESI_UYUSMAZLIGI\"].corr(df[\"NK_FLAG\"])\n","df.drop(\"HATALI_TUKETIM\", inplace=True, axis = 1) # sütunla işlemler bitti ve tekrar kullanılmadığı için droplandı"],"id":"4afe7521","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1b4f24df","executionInfo":{"status":"aborted","timestamp":1636625136908,"user_tz":-180,"elapsed":109,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["drop_list = [\"TUKETIM_M1\",\"TUKETIM_M2\",\"TUKETIM_M3\",\"TUKETIM_M4\",\"TUKETIM_M5\",\"TUKETIM_M6\",\"TUKETIM_M7\",\"TUKETIM_M8\",\"TUKETIM_M9\",\n","             \"TUKETIM_M10\",\"TUKETIM_M11\",\"TUKETIM_M12\",\"TUKETIM_M13\",\"TUKETIM_M14\",\"TUKETIM_M15\",\"TUKETIM_M16\",\"TUKETIM_M17\",\n","             \"TUKETIM_M18\",\"TUKETIM_M19\",\"TUKETIM_M20\",\"TUKETIM_M21\",\"TUKETIM_M22\",\"TUKETIM_M23\",\"TUKETIM_M24\",\"DEMAND_M1\",\n","             \"DEMAND_M2\",\"DEMAND_M3\",\"DEMAND_M4\",\"DEMAND_M5\",\"DEMAND_M6\",\"DEMAND_M7\",\"DEMAND_M8\",\"DEMAND_M9\",\"DEMAND_M10\",\n","             \"DEMAND_M11\",\"DEMAND_M12\",\"SAYAC_MODEL\", \"SAYAC_MALZEME_ID\", \"SAYAC_TAKILMA_TARIHI\", \"SAYAC_BITIS_TARIHI\",\"SAYAC_BASLANGIC_TARIHI\",\"SAYAC_YAPIM_YILI\"]\n","df.drop(drop_list, axis=1, inplace=True)"],"id":"1b4f24df","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"035be96a","executionInfo":{"status":"aborted","timestamp":1636625136911,"user_tz":-180,"elapsed":111,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["for col in cat_cols:\n","  df[col] = df[col].astype('object')\n","\n","columns_to_encode = []\n","for col in df.columns:\n","  if df[col].dtype == 'object':\n","    columns_to_encode.append(col)\n","\n","columns_to_encode"],"id":"035be96a","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"c99233c7","executionInfo":{"status":"aborted","timestamp":1636625136914,"user_tz":-180,"elapsed":114,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["df.head()"],"id":"c99233c7","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"747e82a4","executionInfo":{"status":"aborted","timestamp":1636625136915,"user_tz":-180,"elapsed":114,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["df.info()"],"id":"747e82a4","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"a1c51379","executionInfo":{"status":"aborted","timestamp":1636625136917,"user_tz":-180,"elapsed":116,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import classification_report\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.metrics import accuracy_score\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.svm import SVC\n","from sklearn.metrics import confusion_matrix\n","\n","from imblearn.over_sampling import SMOTE\n","from imblearn.under_sampling import RandomUnderSampler\n","from imblearn.pipeline import Pipeline\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.preprocessing import LabelEncoder\n","import random"],"id":"a1c51379","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7fc3518c-19ce-4825-a921-006ec35f874f","executionInfo":{"status":"aborted","timestamp":1636625136918,"user_tz":-180,"elapsed":116,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["valData = df.head(2999)\n","train_testData = df.tail(12000)"],"id":"7fc3518c-19ce-4825-a921-006ec35f874f","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8531feae","executionInfo":{"status":"aborted","timestamp":1636625136919,"user_tz":-180,"elapsed":116,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["oneHotEncoded_train_testData  = pd.get_dummies(train_testData, columns = columns_to_encode)\n","col_list = oneHotEncoded_train_testData.columns.tolist()"],"id":"8531feae","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ae2a0226","executionInfo":{"status":"aborted","timestamp":1636625136920,"user_tz":-180,"elapsed":116,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["features = []\n","for col in oneHotEncoded_train_testData .columns:\n","  if col != 'NK_FLAG':\n","    features.append(col)\n","\n","target = 'NK_FLAG'\n","\n","X = oneHotEncoded_train_testData [features]\n","y = oneHotEncoded_train_testData [target]"],"id":"ae2a0226","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ad147354","executionInfo":{"status":"aborted","timestamp":1636625136922,"user_tz":-180,"elapsed":114,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["\n","from sklearn.preprocessing import StandardScaler\n","\n","sc = StandardScaler()\n","X = sc.fit_transform(X)"],"id":"ad147354","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"d1427f68","executionInfo":{"status":"aborted","timestamp":1636625136923,"user_tz":-180,"elapsed":114,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["\n","chck = pd.DataFrame()\n","chck['NK_FLAG'] = y\n","\n","sns.countplot(chck['NK_FLAG'])"],"id":"d1427f68","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"a81296be","executionInfo":{"status":"aborted","timestamp":1636625136924,"user_tz":-180,"elapsed":114,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["oversample = SMOTE(random_state=9)\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3,  random_state = 42)\n","X_over, y_over = oversample.fit_resample(X_train, y_train)\n","X_train, X_test, y_train, y_test = train_test_split(X_over, y_over, test_size = 0.3, random_state = 1)"],"id":"a81296be","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"f8ad3de3-ff50-4548-8ddf-536cd6ed4147","executionInfo":{"status":"aborted","timestamp":1636625136925,"user_tz":-180,"elapsed":114,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["\n","chck = pd.DataFrame()\n","chck['NK_FLAG'] = y_train\n","\n","sns.countplot(chck['NK_FLAG'])"],"id":"f8ad3de3-ff50-4548-8ddf-536cd6ed4147","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"841ee832-0471-4504-87d4-d96a3204dfe2","executionInfo":{"status":"aborted","timestamp":1636625136926,"user_tz":-180,"elapsed":113,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["from catboost import CatBoostClassifier"],"id":"841ee832-0471-4504-87d4-d96a3204dfe2","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"177d244e-33fe-4dc3-a66c-2fa803e9e579","executionInfo":{"status":"aborted","timestamp":1636625136928,"user_tz":-180,"elapsed":113,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["#import lightgbm as lgb"],"id":"177d244e-33fe-4dc3-a66c-2fa803e9e579","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8c2a9915-0e12-4c5a-b8a4-2bff95699f77","executionInfo":{"status":"aborted","timestamp":1636625136929,"user_tz":-180,"elapsed":113,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["from sklearn.model_selection import KFold\n","from sklearn.ensemble import StackingClassifier"],"id":"8c2a9915-0e12-4c5a-b8a4-2bff95699f77","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"b7dd7418-dd5b-454d-8a7d-d9df5cb4bc72","executionInfo":{"status":"aborted","timestamp":1636625136930,"user_tz":-180,"elapsed":113,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["cbc=CatBoostClassifier( n_estimators = 200, max_depth = 5, verbose = 0)\n","cbc.fit(X_train, y_train)\n","preds = cbc.predict(X_test)\n","score = cbc.score(X_test, y_test)\n","print(score*100)\n","print(classification_report(y_test, preds))\n","cm = confusion_matrix(y_test, preds)\n","sns.heatmap(cm, annot=True)"],"id":"b7dd7418-dd5b-454d-8a7d-d9df5cb4bc72","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"940b6b7a-efc3-4dd8-9363-dcca1975ca96","executionInfo":{"status":"aborted","timestamp":1636625136932,"user_tz":-180,"elapsed":114,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["oneHotEncoded_valData = pd.get_dummies(valData, columns = columns_to_encode)\n","oneHotEncoded_valData = oneHotEncoded_valData.reindex(columns=col_list).fillna(0)"],"id":"940b6b7a-efc3-4dd8-9363-dcca1975ca96","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"63c6b48d-3849-4236-b38c-56ed41a3b3a3","executionInfo":{"status":"aborted","timestamp":1636625136933,"user_tz":-180,"elapsed":114,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["features1 = []\n","for col in oneHotEncoded_valData.columns:\n","  if col != 'NK_FLAG':\n","    features1.append(col)\n","\n","target1 = 'NK_FLAG'\n","\n","X_val = oneHotEncoded_valData[features1]\n","y_val = oneHotEncoded_valData[target1]"],"id":"63c6b48d-3849-4236-b38c-56ed41a3b3a3","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"b70cb567-f0ba-4208-8c67-f94f3f80f6d4","executionInfo":{"status":"aborted","timestamp":1636625136934,"user_tz":-180,"elapsed":114,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["X_val = sc.transform(X_val)"],"id":"b70cb567-f0ba-4208-8c67-f94f3f80f6d4","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2cb5380c-73e7-45ba-acbc-ff9796ce5334","executionInfo":{"status":"aborted","timestamp":1636625136935,"user_tz":-180,"elapsed":115,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["preds = cbc.predict(X_val)\n","score = cbc.score(X_val, y_val)\n","print(score*100)\n","print()\n","print(classification_report(y_val, preds))\n","\n","cm = confusion_matrix(y_val, preds)\n","sns\n","sns.heatmap(cm, annot=True)"],"id":"2cb5380c-73e7-45ba-acbc-ff9796ce5334","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1eb0e911-cb40-42e8-b183-9a8418fbdee2","executionInfo":{"status":"aborted","timestamp":1636625136937,"user_tz":-180,"elapsed":116,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["train_testData.info()"],"id":"1eb0e911-cb40-42e8-b183-9a8418fbdee2","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"c23eff46-0583-44bd-936f-ab29607c6256","executionInfo":{"status":"aborted","timestamp":1636625136938,"user_tz":-180,"elapsed":116,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["train_testData1 = train_testData.drop(\"NK_FLAG\",1)"],"id":"c23eff46-0583-44bd-936f-ab29607c6256","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"11f77fee-2335-4ee1-8d8e-59c283d3b242","executionInfo":{"status":"aborted","timestamp":1636625136940,"user_tz":-180,"elapsed":118,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["valData1 = valData.drop(\"NK_FLAG\",1)"],"id":"11f77fee-2335-4ee1-8d8e-59c283d3b242","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4bcc5086-5f62-4b59-98df-0867e81c9c95","executionInfo":{"status":"aborted","timestamp":1636625136941,"user_tz":-180,"elapsed":118,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["from sklearn.preprocessing import OneHotEncoder\n","\n","encoder = OneHotEncoder(handle_unknown='ignore')\n","X1 = encoder.fit_transform(train_testData1[columns_to_encode]).toarray()   # Assume for simplicity all features are categorical.\n","# Apply the encoder.\n","X1_val = encoder.transform(valData1[columns_to_encode]).toarray()"],"id":"4bcc5086-5f62-4b59-98df-0867e81c9c95","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"22cce034-fa4c-4ce0-a229-9be1a7d56c05","executionInfo":{"status":"aborted","timestamp":1636625136943,"user_tz":-180,"elapsed":119,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["Y1 = train_testData[\"NK_FLAG\"]"],"id":"22cce034-fa4c-4ce0-a229-9be1a7d56c05","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"fb6b56f7-ad9c-4b2f-ae3f-ec32ba526348","executionInfo":{"status":"aborted","timestamp":1636625136944,"user_tz":-180,"elapsed":120,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["Y1_val = valData[\"NK_FLAG\"]"],"id":"fb6b56f7-ad9c-4b2f-ae3f-ec32ba526348","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"971ad957-683e-409f-98ae-289ccd1b497b","executionInfo":{"status":"aborted","timestamp":1636625136946,"user_tz":-180,"elapsed":120,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["from sklearn.preprocessing import StandardScaler\n","\n","sc = StandardScaler()\n","X1 = sc.fit_transform(X1)"],"id":"971ad957-683e-409f-98ae-289ccd1b497b","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"aa862dd9-6c9e-445b-a894-b4cdac527a85","executionInfo":{"status":"aborted","timestamp":1636625136947,"user_tz":-180,"elapsed":120,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["oversample = SMOTE(random_state=9)\n","X_train, X_test, y_train, y_test = train_test_split(X1, Y1, test_size = 0.3,  random_state = 42)\n","X_over, y_over = oversample.fit_resample(X_train, y_train)\n","X_train, X_test, y_train, y_test = train_test_split(X_over, y_over, test_size = 0.3, random_state = 1)"],"id":"aa862dd9-6c9e-445b-a894-b4cdac527a85","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"70eb5bfa-e1d1-45ec-bc90-b810b1d9c83d","executionInfo":{"status":"aborted","timestamp":1636625136949,"user_tz":-180,"elapsed":121,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["rfc2 = RandomForestClassifier(random_state = 1)\n","rfc2.fit(X_train, y_train)\n","\n","preds = rfc2.predict(X_test)\n","\n","score = rfc2.score(X_test, y_test)\n","print(score*100)\n","print(classification_report(y_test, preds))\n","\n","cm = confusion_matrix(y_test, preds)\n","sns.heatmap(cm, annot=True)"],"id":"70eb5bfa-e1d1-45ec-bc90-b810b1d9c83d","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"a4cafb9a-5bcf-437f-89d9-60377511fe27","executionInfo":{"status":"aborted","timestamp":1636625136950,"user_tz":-180,"elapsed":121,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["X1_val = sc.transform(X1_val)"],"id":"a4cafb9a-5bcf-437f-89d9-60377511fe27","execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"122108a1-a5c7-4fc3-af71-5d915dc4b729","executionInfo":{"status":"aborted","timestamp":1636625136952,"user_tz":-180,"elapsed":122,"user":{"displayName":"Mustafacan Gençgül","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhR8NRBWD2g8OWQP-Vs2ppAUC0bYAf68G3rrZIJIg=s64","userId":"12839889570339399086"}}},"source":["preds = rfc2.predict(X1_val)\n","score = rfc2.score(X1_val, Y1_val)\n","print(score*100)\n","print()\n","print(classification_report(Y1_val, preds))\n","\n","cm = confusion_matrix(Y1_val, preds)\n","sns\n","sns.heatmap(cm, annot=True)"],"id":"122108a1-a5c7-4fc3-af71-5d915dc4b729","execution_count":null,"outputs":[]}]}